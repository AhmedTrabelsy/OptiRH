{% extends 'partials/layout-vertical.html.twig' %}

{% block title %}Analyse des CV - Matching{% endblock %}

{% block css %}
    {{ parent() }}
    <!-- DataTables -->
    <link href="{{ asset('libs/datatables.net-bs5/css/dataTables.bootstrap5.min.css') }}" rel="stylesheet">
    <link href="{{ asset('libs/datatables.net-responsive-bs5/css/responsive.bootstrap5.min.css') }}" rel="stylesheet">
    <!-- Select2 -->
    <link href="{{ asset('libs/select2/css/select2.min.css') }}" rel="stylesheet">
    <style>
        /* Vibrant button hover effects */
        .btn-primary, .btn-success {
            transition: transform 0.2s ease, filter 0.2s ease;
        }
        .btn-primary:hover, .btn-success:hover {
            transform: scale(1.05);
            filter: brightness(1.1);
        }
        /* Enhance card appearance */
        .card {
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
        }
        /* Table row hover effect */
        .table-striped tbody tr:hover {
            background-color: #f1f5f7;
        }
        /* Ranked row colors */
        .bg-top-1 {
            background-color: #c6ecfd !important; /* Light teal */
            color: #212529;
        }
        .bg-top-2 {
            background-color: #d1c4e9 !important; /* Light green */
            color: #212529;
        }
        .bg-top-3 {
            background-color: #d7dea6 !important; /* Light purple */
            color: #212529;
        }
        .bg-lower {
            background-color: #eceff1 !important; /* Light grey-blue */
            color: #212529;
        }
    </style>
{% endblock %}

{% block topbar %}
    {{ include('partials/topbar.html.twig', {
        page_title: 'Analyse intelligente des CV',
        primary_button: {
            href: path('app_offre_index'),
            label: 'Retour aux offres'
        }
    }) }}
{% endblock %}

{% block body %}
    <!-- Toast Container -->
    <div id="toast-container" class="toast-container position-fixed top-0 end-0 p-3"></div>

    <!-- Flash Messages -->
    {% for label, messages in app.flashes %}
        {% for message in messages %}
            <div class="alert alert-{{ label }} alert-dismissible fade show" role="alert">
                {{ message }}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        {% endfor %}
    {% endfor %}

    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <h4 class="header-title">Sélection de l'offre</h4>
                    <p class="text-muted mb-3">
                        Sélectionnez une offre active pour analyser les candidatures associées
                    </p>

                    <div class="row g-3">
                        <div class="col-md-6">
                            <label for="offre-select" class="form-label">Offre d'emploi</label>
                            <select id="offre-select" class="form-select select2">
                                <option value="">-- Choisir une offre active --</option>
                                {% for offre in offres %}
                                    <option value="{{ offre.id }}" data-status="{{ offre.statut|lower }}">
                                        {{ offre.poste }} (ID: {{ offre.id }})
                                    </option>
                                {% endfor %}
                            </select>
                        </div>
                    </div>
                </div>
            </div>

            <div id="demandes-section" class="card mt-3" style="display: none;">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h4 class="header-title">Candidatures reçues</h4>
                        <div class="d-flex align-items-center gap-2">
                            <div id="loading-spinner" class="spinner-border text-primary" role="status" style="display: none;">
                                <span class="visually-hidden">Chargement...</span>
                            </div>
                            <button id="analyse-button" class="btn btn-primary" disabled>
                                <i class="mdi mdi-file-compare me-2"></i>
                                Lancer l'analyse
                            </button>
                            <a id="view-offre-button" href="#" class="btn btn-success" disabled data-bs-toggle="tooltip" title="Voir l'offre">
                                <i class="mdi mdi-eye me-2"></i>
                                Voir l'offre
                            </a>
                        </div>
                    </div>

                    <table id="demandes-table" class="table table-striped dt-responsive nowrap w-100">
                        <thead class="table-light">
                        <tr>
                            <th>#</th>
                            <th>Candidat</th>
                            <th>Contact</th>
                            <th>CV</th>
                            <th>Résultat</th>
                            <th>Voir</th>
                        </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascript %}
{{ parent() }}
<!-- DataTables & Plugins -->
<script src="{{ asset('libs/datatables.net/js/jquery.dataTables.min.js') }}" defer></script>
<script src="{{ asset('libs/datatables.net-bs5/js/dataTables.bootstrap5.min.js') }}" defer></script>
<script src="{{ asset('libs/select2/js/select2.min.js') }}" defer></script>

<script>
    document.addEventListener("DOMContentLoaded", function() {
        // Initialize Select2
        $('.select2').select2({
            placeholder: "Rechercher une offre...",
            allowClear: true,
            templateResult: formatOffreOption
        });

        function formatOffreOption(offre) {
            if (!offre.id) return offre.text;

            const $status = $(offre.element).data('status');
            const statusClass = {
                'active': 'bg-success',
                'en attente': 'bg-warning',
                'expirée': 'bg-danger'
            }[$status] || 'bg-secondary';

            return $(
                `<div class="d-flex justify-content-between align-items-center">
                    <span>${offre.text}</span>
                    <span class="badge ${statusClass}">${$status}</span>
                </div>`
            );
        }

        // Initialize DataTable
        const demandeTable = $('#demandes-table').DataTable({
            columns: [
                { data: 'id' },
                { data: 'candidat' },
                { data: 'contact' },
                { data: 'cv', orderable: false },
                { data: 'resultat', orderable: true },
                { data: 'voir', orderable: false }
            ],
            language: {
                url: "https://cdn.datatables.net/plug-ins/1.13.6/i18n/fr-FR.json"
            },
            responsive: true,
            ordering: true,
            searching: true,
            paging: true,
            pageLength: 10
        });

        let currentOffreId = null;
        let nbPostes = 1;

        // Handle offer selection
        $('#offre-select').on('change', function() {
            currentOffreId = this.value;
            console.log('Selected Offre ID:', currentOffreId);
            const offreSection = $('#demandes-section');
            const analyseBtn = $('#analyse-button');
            const viewOffreBtn = $('#view-offre-button');
            const spinner = $('#loading-spinner');

            if (!currentOffreId) {
                offreSection.hide();
                analyseBtn.prop('disabled', true);
                viewOffreBtn.addClass('disabled').attr('href', '#');
                return;
            }

            viewOffreBtn.removeClass('disabled').attr('href', `{{ path('app_offre_show', {'id': 'OFFRE_ID'}) }}`.replace('OFFRE_ID', currentOffreId));

            spinner.show();
            demandeTable.clear().draw();

            fetch(`{{ path('admin_analyse_cv_demandes', {'offreId': 'OFFRE_ID'}) }}`.replace('OFFRE_ID', currentOffreId))
                .then(response => {
                    if (!response.ok) throw new Error('Erreur réseau');
                    return response.json();
                })
                .then(data => {
                    if (data.error) {
                        throw new Error(data.error);
                    }

                    console.log('Demande IDs:', data.demandes.map(d => d.id));

                    demandeTable.rows.add(data.demandes.map(d => ({
                        id: d.id,
                        candidat: `<div class="d-flex align-items-center">
                                    <div class="flex-shrink-0">
                                        <i class="mdi mdi-account-circle mdi-24px text-primary"></i>
                                    </div>
                                    <div class="flex-grow-1 ms-2">
                                        ${d.nomComplet}
                                    </div>
                                </div>`,
                        contact: `${d.email}`,
                        cv: d.fichierPieceJointe.includes('Aucun CV') ?
                            'Aucun CV' :
                            `<a href="{{ asset('Uploads/') }}${d.fichierPieceJointe}" class="btn btn-sm btn-outline-primary" download>
                                <i class="mdi mdi-file-pdf-box mdi-18px"></i> Télécharger
                            </a>`,
                        resultat: 'Non analysé',
                    voir: d.id ?
                        `<a href="/demande/${d.id}"
                            class="btn btn-sm btn-soft-primary" data-bs-toggle="tooltip" title="Voir détails">
                            <i class="mdi mdi-eye-outline"></i>
                        </a>` :
                        `<span class="text-muted">Demande non disponible</span>`
                    }))).draw();

                    analyseBtn.prop('disabled', data.demandes.length === 0);
                    offreSection.slideDown();
                })
                .catch(error => {
                    console.error('Error fetching demandes:', error);
                    alertToast('Erreur', error.message, 'danger');
                })
                .finally(() => spinner.hide());
        });

        // Handle analysis
        $('#analyse-button').on('click', function() {
            if (!currentOffreId) return;

            const spinner = $('#loading-spinner');
            spinner.show();

            fetch(`{{ path('admin_analyse_cv_results', {'offreId': 'OFFRE_ID'}) }}`.replace('OFFRE_ID', currentOffreId))
                .then(response => {
                    if (!response.ok) throw new Error('Erreur lors de l\'analyse');
                    return response.json();
                })
                .then(data => {
                    if (data.error) {
                        throw new Error(data.error);
                    }

                    // Store nbPostes
                    nbPostes = data.nbPostes || 1;
                    console.log('Number of posts:', nbPostes);

                    // Update table with results and apply colors
                    demandeTable.rows().every(function(index) {
                        const rowData = this.data();
                        const result = data.results.find(r => r.demandeId === rowData.id);
                        rowData.resultat = result ? `${(result.score * 100).toFixed(2)}%` : 'Non analysé';

                        // Apply row color based on rank
                        const rowNode = this.node();
                        $(rowNode).removeClass('bg-top-1 bg-top-2 bg-top-3 bg-lower');
                        if (result && result.score > 0) {
                            const rank = data.results.indexOf(result) + 1;
                            if (rank === 1 && nbPostes >= 1) {
                                $(rowNode).addClass('bg-top-1');
                            } else if (rank === 2 && nbPostes >= 2) {
                                $(rowNode).addClass('bg-top-2');
                            } else if (rank === 3 && nbPostes >= 3) {
                                $(rowNode).addClass('bg-top-3');
                            } else {
                                $(rowNode).addClass('bg-lower');
                            }
                        }

                        this.data(rowData).draw(false);
                    });

                    // Sort table by resultat descending
                    demandeTable.order([[4, 'desc']]).draw();
                })
                .catch(error => {
                    console.error('Error during analysis:', error);
                    alertToast('Erreur', error.message, 'danger');
                })
                .finally(() => spinner.hide());
        });

        function alertToast(title, message, type = 'success') {
            const toast = $(`
                <div class="toast align-items-center text-white bg-${type} border-0" role="alert">
                    <div class="d-flex">
                        <div class="toast-body">${title}: ${message}</div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                    </div>
                </div>
            `);

            $('#toast-container').append(toast);
            new bootstrap.Toast(toast[0], { delay: 5000 }).show();
        }

        // Initialize tooltips
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });
    });
</script>
{% endblock %}