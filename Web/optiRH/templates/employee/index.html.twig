{% extends 'partials/layout-vertical.html.twig' %}

{% block title %}Mon Dashboard{% endblock %}

{% block css %}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<link rel="stylesheet" href="https://www.gstatic.com/charts/loader.js">
<style>
    :root {
        --primary: #4e73df;
        --warning: #f6c23e;
        --success: #1cc88a;
        --danger: #e74a3b;
        --shadow: 0 6px 20px rgba(0,0,0,0.05);
    }

    /* Styles communs */
    #weather { 
        display: flex; 
        flex-wrap: wrap; 
        gap: 1.5rem; 
        margin-top: 2rem;
    }
    .weather-card { 
        background: #fff; 
        border-radius: 16px; 
        box-shadow: var(--shadow); 
        padding: 1.25rem 1.5rem;
        flex: 1 1 300px;
        transition: transform 0.3s ease;
    }
    .weather-card:hover {
        transform: translateY(-3px);
    }
    .weather-icon {
        width: 60px;
        height: 60px;
        margin: 0 auto;
        display: block;
    }

    /* Styles des statistiques */
    .employee-stats { 
        display: grid; 
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr)); 
        gap: 1.5rem;
        margin-bottom: 2rem;
    }
    .stat-card { 
        background: #fff; 
        padding: 2rem; 
        border-radius: 12px; 
        text-align: center;
        box-shadow: var(--shadow);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        position: relative;
        overflow: hidden;
    }
    .stat-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0,0,0,0.1);
    }
    .stat-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 4px;
        height: 100%;
        background: var(--primary);
    }
    .stat-card.in-progress::before { background: var(--warning); }
    .stat-card.completed::before { background: var(--success); }
    .stat-card.late::before { background: var(--danger); }
    .stat-icon {
        font-size: 2.5rem;
        margin-bottom: 0.75rem;
        color: var(--primary);
    }
    .stat-value { 
        font-size: 2.4rem; 
        font-weight: bold;
        margin: 0.5rem 0;
    }
    .stat-label {
        font-size: 1.1rem;
        color: #6c757d;
        text-transform: uppercase;
        letter-spacing: 1px;
    }
    #totalMissions { color: var(--primary); }
    #inProgress { color: var(--warning); }
    #completed { color: var(--success); }
    #lateMissions { color: var(--danger); }

    /* Styles des graphiques */
    .chart-wrapper { 
        background: white; 
        border-radius: 12px; 
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: var(--shadow);
        transition: transform 0.3s ease;
    }
    .chart-wrapper:hover {
        transform: translateY(-3px);
    }
    #personalMissionChart, #missionTrendChart {
        width: 100%;
        height: 350px;
        opacity: 0;
        transition: opacity 0.5s ease;
    }
    #personalMissionChart.loaded, #missionTrendChart.loaded {
        opacity: 1;
    }

    /* Styles des missions en retard */
    .mission-list { 
        margin-top: 2rem;
    }
    .mission-list-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
    }
    .mission-item { 
        padding: 1.5rem; 
        margin-bottom: 1.5rem; 
        border-left: 6px solid var(--danger);
        background: #fff;
        border-radius: 12px;
        box-shadow: var(--shadow);
        transition: transform 0.3s ease, opacity 0.5s ease;
        opacity: 0;
        animation: fadeIn 0.5s ease forwards;
    }
    .mission-item:nth-child(1) { animation-delay: 0.1s; }
    .mission-item:nth-child(2) { animation-delay: 0.2s; }
    .mission-item:nth-child(3) { animation-delay: 0.3s; }
    .mission-item:hover {
        transform: translateY(-3px);
    }
    .mission-item.critical {
        border-left-color: #b22222;
        background: #ffe6e6;
    }
    .mission-details {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 1rem;
    }
    .mission-actions .btn {
        padding: 0.5rem 1rem;
        font-size: 0.9rem;
        border-radius: 8px;
        transition: all 0.3s ease;
    }
    .mission-actions .btn:hover {
        transform: translateY(-2px);
    }
    .badge-critical {
        background: #b22222 !important;
    }
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }

    /* Styles de la recherche */
    .search-input {
        border-radius: 8px;
        border: 1px solid #ced4da;
        padding: 0.5rem 1rem;
        width: 100%;
        max-width: 300px;
        transition: border-color 0.3s ease;
    }
    .search-input:focus {
        border-color: var(--primary);
        box-shadow: 0 0 0 0.2rem rgba(78, 115, 223, 0.25);
    }

    /* Responsivité */
    @media (max-width: 576px) {
        .employee-stats {
            grid-template-columns: 1fr;
        }
        .stat-card {
            padding: 1.5rem;
        }
        .stat-value {
            font-size: 2rem;
        }
        .stat-icon {
            font-size: 2rem;
        }
        .mission-item {
            padding: 1rem;
        }
        .mission-details {
            flex-direction: column;
            align-items: flex-start;
        }
        .search-input {
            max-width: 100%;
        }
        #personalMissionChart, #missionTrendChart {
            height: 300px;
        }
    }

    /* Styles pour les statistiques des réclamations */
    .stats-card {
        border-radius: 12px;
        box-shadow: 0 4px 16px rgba(0,0,0,0.08);
        transition: all 0.3s ease;
        overflow: hidden;
        height: 100%;
        margin-bottom: 20px;
    }
    
    .stats-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 24px rgba(0,0,0,0.12);
    }
    
    .stats-card .card-header {
        background-color: var(--primary-color);
        color: white;
        padding: 16px;
        border-bottom: none;
    }
    
    .stats-card .card-body {
        padding: 20px;
    }
    
    .chart-container {
        width: 100%;
        height: 300px;
        margin: 0 auto;
    }
    
    .key-metric {
        text-align: center;
        padding: 20px;
        border-radius: 10px;
        background: linear-gradient(to right, var(--light-color), white);
        margin-bottom: 20px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.05);
    }
    
    .metric-value {
        font-size: 2.8rem;
        font-weight: 700;
        color: var(--primary-color);
        margin-bottom: 0;
    }
    
    .metric-label {
        color: var(--dark-color);
        font-size: 1rem;
        opacity: 0.8;
    }
</style>
{% endblock %}

{% block topbar %}
    {{ include('partials/topbar.html.twig', { page_title: 'Mon Tableau de Bord' }) }}
{% endblock %}

{% block body %}
<div id="weather">
    <div class="weather-card">
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Chargement...</span>
            </div>
            <p>Chargement des données météo...</p>
        </div>
    </div>
</div>
<div><br></div>

<div class="employee-stats">
    <div class="stat-card">
        <i class="fas fa-tasks stat-icon" style="color: var(--primary);"></i>
        <div class="stat-label">Mes Missions</div>
        <p class="stat-value" id="totalMissions">{{ total_missions }}</p>
    </div>
    <div class="stat-card in-progress">
        <i class="fas fa-spinner stat-icon" style="color: var(--warning);"></i>
        <div class="stat-label">En Cours</div>
        <p class="stat-value" id="inProgress">{{ mission_stats|filter(stat => stat.status == 'In Progress')|first.count|default(0) }}</p>
    </div>
    <div class="stat-card completed">
        <i class="fas fa-check-circle stat-icon" style="color: var(--success);"></i>
        <div class="stat-label">Terminées</div>
        <p class="stat-value" id="completed">{{ mission_stats|filter(stat => stat.status == 'Done')|first.count|default(0) }}</p>
    </div>
    <div class="stat-card late">
        <i class="fas fa-exclamation-triangle stat-icon" style="color: var(--danger);"></i>
        <div class="stat-label">En Retard</div>
        <p class="stat-value" id="lateMissions">{{ late_missions|length }}</p>
    </div>
</div>

<div class="chart-wrapper">
    <h3>Répartition de mes missions</h3>
    <div id="personalMissionChart" style="width: 100%; height: 350px;"></div>
</div>

<div class="chart-wrapper">
    <h3>Évolution des missions (6 derniers mois)</h3>
    <div id="missionTrendChart" style="width: 100%; height: 350px;"></div>
</div>

<div class="mission-list">
    <div class="mission-list-header">
        <h3><i class="fas fa-exclamation-triangle text-danger me-2"></i> Mes missions en retard</h3>
        <input type="text" class="search-input" id="missionSearch" placeholder="Rechercher une mission...">
    </div>
    <div id="missionListContainer">
        {% if late_missions is empty %}
            <div class="alert alert-success">
                <i class="fas fa-check-circle me-2"></i> Félicitations ! Aucune mission en retard.
            </div>
        {% else %}
            {% for mission in late_missions %}
                <div class="mission-item {% if mission.getDaysLate() > 7 %}critical{% endif %}" data-mission-id="{{ mission.id }}">
                    <div class="mission-details">
                        <div>
                            <h4 class="mb-1">{{ mission.titre }}</h4>
                            <p class="mb-1"><i class="fas fa-project-diagram me-2"></i>Projet: {{ mission.project.nom }}</p>
                            <p class="mb-1"><i class="far fa-calendar-times me-2"></i>Date limite: {{ mission.dateTerminer|date('d/m/Y') }}</p>
                            {% if mission.description %}
                                <p class="mb-0"><i class="fas fa-info-circle me-2"></i>{{ mission.description|slice(0, 100) }}{% if mission.description|length > 100 %}...{% endif %}</p>
                            {% endif %}
                        </div>
                        <div class="mission-actions">
                            <span class="badge {% if mission.getDaysLate() > 7 %}badge-critical{% else %}bg-danger{% endif %} me-2">
                                Retard: {{ mission.getDaysLate() }} jour{{ mission.getDaysLate() > 1 ? 's' : '' }}
                            </span>
                         
                         
                            <button class="btn btn-primary btn-sm view-details" data-mission-id="{{ mission.id }}">
                                <i class="fas fa-eye me-1"></i> Détails
                            </button>
                        </div>
                    </div>
                </div>
            {% endfor %}
        {% endif %}
    </div>
</div>

<!-- Modal pour les détails de la mission -->
<div class="modal fade" id="missionDetailModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">Détails de la Mission</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label fw-bold">Titre</label>
                    <div id="modalMissionTitle"></div>
                </div>
                <div class="mb-3">
                    <label class="form-label fw-bold">Projet</label>
                    <div id="modalMissionProject"></div>
                </div>
                <div class="mb-3">
                    <label class="form-label fw-bold">Date limite</label>
                    <div id="modalMissionDeadline"></div>
                </div>
                <div class="mb-3">
                    <label class="form-label fw-bold">Description</label>
                    <div id="modalMissionDescription" class="border rounded p-2" style="min-height: 100px;"></div>
                </div>
                <div class="mb-3">
                    <label class="form-label fw-bold">Retard</label>
                    <div id="modalMissionDelay"></div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
            </div>
        </div>
    </div>
</div>

<!-- Section Réclamations -->
<div class="row mb-4">
    <div class="col-12">
        <div class="card shadow-sm">
            <div class="card-header bg-primary text-white">
                <h6 class="m-0 font-weight-bold">
                    <i class="fas fa-chart-pie me-2"></i>Statistiques des réclamations
                </h6>
            </div>
            <div class="card-body">
                <!-- KPI majeur: Taux de résolution -->
                <div class="key-metric">
                    <h4 class="metric-value">{{ resolutionRate }}%</h4>
                    <p class="metric-label">Taux de résolution global</p>
                </div>
                
                <!-- Première rangée de graphiques -->
                <div class="row gy-4 mb-4">
                    <!-- Statistiques par statut -->
                    <div class="col-xl-6 col-lg-6">
                        <div class="stats-card">
                            <div class="card-header">
                                <h5 class="card-title mb-0">Statut des réclamations</h5>
                            </div>
                            <div class="card-body">
                                <div class="chart-container">
                                    <canvas id="statusChart"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Statistiques par sentiment -->
                    <div class="col-xl-6 col-lg-6">
                        <div class="stats-card">
                            <div class="card-header">
                                <h5 class="card-title mb-0">Sentiment des réclamations</h5>
                            </div>
                            <div class="card-body">
                                <div class="chart-container">
                                    <canvas id="sentimentChart"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Deuxième rangée de graphiques -->
                <div class="row gy-4">
                    <!-- Statistiques par type -->
                    <div class="col-xl-6 col-lg-6 mt-4">
                        <div class="stats-card">
                            <div class="card-header">
                                <h5 class="card-title mb-0">Types de réclamations</h5>
                            </div>
                            <div class="card-body">
                                <div class="chart-container">
                                    <canvas id="typeChart"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Évolution dans le temps -->
                    <div class="col-xl-6 col-lg-6 mt-4">
                        <div class="stats-card">
                            <div class="card-header">
                                <h5 class="card-title mb-0">Évolution des réclamations</h5>
                            </div>
                            <div class="card-body">
                                <div class="chart-container">
                                    <canvas id="timelineChart"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

{% endblock %}

{% block javascript %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Initialisation des graphiques...');
            
            // Graphique de répartition des missions personnelles
            const personalMissionCtx = document.getElementById('personalMissionChart').getContext('2d');
            new Chart(personalMissionCtx, {
                type: 'pie',
                data: {
                    labels: ['En cours', 'Terminées', 'En retard'],
                    datasets: [{
                        data: [
                            {{ mission_stats|filter(stat => stat.status == 'In Progress')|first.count|default(0) }},
                            {{ mission_stats|filter(stat => stat.status == 'Done')|first.count|default(0) }},
                            {{ late_missions|length }}
                        ],
                        backgroundColor: ['#f6c23e', '#1cc88a', '#e74a3b'],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'right'
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const value = context.raw;
                                    const percentage = ((value / total) * 100).toFixed(1);
                                    return `${context.label}: ${value} (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
            });

            // Graphique d'évolution des missions
            const missionTrendCtx = document.getElementById('missionTrendChart').getContext('2d');
            const missionTimeline = {{ mission_timeline|json_encode|raw }};
            
            new Chart(missionTrendCtx, {
                type: 'line',
                data: {
                    labels: missionTimeline.map(item => item.month),
                    datasets: [
                        {
                            label: 'Missions créées',
                            data: missionTimeline.map(item => item.created),
                            borderColor: '#4e73df',
                            backgroundColor: 'rgba(78, 115, 223, 0.1)',
                            fill: true,
                            tension: 0.4
                        },
                        {
                            label: 'Missions terminées',
                            data: missionTimeline.map(item => item.completed),
                            borderColor: '#1cc88a',
                            backgroundColor: 'rgba(28, 200, 138, 0.1)',
                            fill: true,
                            tension: 0.4
                        }
                    ]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top'
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });

            // Chart 1: Statut des réclamations
            const statusCtx = document.getElementById('statusChart').getContext('2d');
            const statusData = {{ statusDataJson|raw }};
            const statusLabels = statusData.slice(1).map(item => item[0]);
            const statusValues = statusData.slice(1).map(item => item[1]);
            
            new Chart(statusCtx, {
                type: 'doughnut',
                data: {
                    labels: statusLabels,
                    datasets: [{
                        data: statusValues,
                        backgroundColor: ['#f39c12', '#3498db', '#2ecc71'],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'right'
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const value = context.raw;
                                    const percentage = ((value / total) * 100).toFixed(1);
                                    return `${context.label}: ${value} (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
            });
            
            // Chart 2: Sentiment des réclamations
            const sentimentCtx = document.getElementById('sentimentChart').getContext('2d');
            const sentimentData = {{ sentimentDataJson|raw }};
            const sentimentLabels = sentimentData.slice(1).map(item => item[0]);
            const sentimentValues = sentimentData.slice(1).map(item => item[1]);
            
            new Chart(sentimentCtx, {
                type: 'doughnut',
                data: {
                    labels: sentimentLabels,
                    datasets: [{
                        data: sentimentValues,
                        backgroundColor: ['#2ecc71', '#f39c12', '#e74c3c'],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'right'
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const value = context.raw;
                                    const percentage = ((value / total) * 100).toFixed(1);
                                    return `${context.label}: ${value} (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
            });
            
            // Chart 3: Type des réclamations
            const typeCtx = document.getElementById('typeChart').getContext('2d');
            const typeData = {{ typeDataJson|raw }};
            const typeLabels = typeData.slice(1).map(item => item[0]);
            const typeValues = typeData.slice(1).map(item => item[1]);
            
            new Chart(typeCtx, {
                type: 'bar',
                data: {
                    labels: typeLabels,
                    datasets: [{
                        data: typeValues,
                        backgroundColor: '#3498db',
                        borderWidth: 1
                    }]
                },
                options: {
                    indexAxis: 'y',
                    responsive: true,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        x: {
                            beginAtZero: true
                        }
                    }
                }
            });
            
            // Chart 4: Timeline des réclamations
            const timelineCtx = document.getElementById('timelineChart').getContext('2d');
            const timelineData = {{ timelineDataJson|raw }};
            const timelineLabels = timelineData.slice(1).map(item => item[0]);
            const timelineValues = timelineData.slice(1).map(item => item[1]);
            
            new Chart(timelineCtx, {
                type: 'line',
                data: {
                    labels: timelineLabels,
                    datasets: [{
                        data: timelineValues,
                        borderColor: '#3498db',
                        backgroundColor: 'rgba(52, 152, 219, 0.1)',
                        fill: true,
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        });
    </script>
{% endblock %}