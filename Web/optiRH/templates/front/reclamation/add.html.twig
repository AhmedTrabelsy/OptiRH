{# templates/front/reclamation/add.html.twig #}
{% extends 'partials/layout-vertical.html.twig' %}

{% block topbar %}
    {{ include('partials/topbar.html.twig', { page_title: 'Ajouter une Reclamation' }) }}
{% endblock %}

{% block title %}Ajouter une Réclamation{% endblock %}

{% block body %}
    <div class="container-fluid">
        <div class="page-header">
            <div class="row align-items-center">
                <div class="col">
                    <h1 class="page-header-title">
                        <i class="fas fa-plus-circle text-primary me-2"></i>
                        Nouvelle Réclamation
                    </h1>
                    <p class="lead text-muted mb-0">Remplissez le formulaire ci-dessous pour soumettre votre réclamation</p>
                </div>
            </div>
        </div>

        {# Outil de traduction avec reconnaissance vocale #}
        <div id="translation-container" data-translation-url="{{ path('front_translate_text') }}">
            <div class="row mb-4">
                <div class="col-md-8 offset-md-2">
                    <div class="card">
                        <div class="card-header bg-info text-white">
                            <h5 class="card-title mb-0">
                                <i class="fas fa-language me-2"></i>Outil de traduction
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="text_to_translate" class="form-label fw-bold text-primary">Texte à traduire</label>
                                    <textarea name="text_to_translate" id="text_to_translate" class="form-control" rows="5" placeholder="Entrez votre texte ici"></textarea>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label for="translated_text" class="form-label fw-bold text-success">Texte traduit</label>
                                    <textarea name="translated_text" id="translated_text" class="form-control" rows="5" placeholder="Résultat de la traduction" readonly></textarea>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-4 mb-3">
                                    <label for="target_language" class="form-label fw-bold text-primary">Langue cible</label>
                                    <select name="target_language" id="target_language" class="form-select">
                                        {% for code, langue in availableLanguages %}
                                            <option value="{{ code }}">{{ langue }}</option>
                                        {% endfor %}
                                    </select>
                                </div>
                                <div class="col-md-8 mb-3 d-flex align-items-end justify-content-end">
                                    <button type="button" id="translate-btn" class="btn btn-info text-white">
                                        <i class="fas fa-exchange-alt me-1"></i> Traduire
                                    </button>
                                    <button type="button" id="use-translation" class="btn btn-success ms-2">
                                        <i class="fas fa-check me-1"></i> Utiliser cette traduction
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        {# Formulaire de réclamation #}
        <div class="row">
            <div class="col-md-8 offset-md-2">
                {{ form_start(form, {
                    'attr': {
                        'id': 'reclamation-form',
                        'class': 'form-horizontal',
                        'novalidate': 'novalidate'
                    }
                }) }}
                
                <div class="card {% if not form.vars.valid %}border-danger{% endif %}">
                    <div class="card-header {% if not form.vars.valid %}bg-danger text-white{% endif %}">
                        <h5 class="card-title">
                            {% if not form.vars.valid %}
                                <i class="fas fa-exclamation-triangle me-2"></i>Veuillez corriger les erreurs
                            {% else %}
                                <i class="fas fa-edit me-2"></i>Formulaire de réclamation
                            {% endif %}
                        </h5>
                    </div>
                    
                    <div class="card-body">
                        <!-- Champ Description avec reconnaissance vocale -->
                        <div class="mb-3 input-with-icon">
                            <div class="d-flex align-items-center mb-2">
                                <i class="fas fa-align-left input-icon text-primary me-2"></i>
                                {{ form_label(form.description, null, {
                                    'label_attr': {'class': 'form-label fw-bold text-primary m-0'}
                                }) }}
                                <button type="button" id="start-recording" class="btn btn-sm btn-outline-primary ms-2">
                                    <i class="fas fa-microphone"></i> Parler
                                </button>
                            </div>
                            {{ form_widget(form.description, {
                                'attr': {
                                    'class': 'form-control' ~ (form.description.vars.errors|length ? ' is-invalid' : ''),
                                    'rows': 5,
                                    'placeholder': 'Décrivez votre réclamation en détail (10 caractères minimum)',
                                    'id': 'reclamation_description'
                                }
                            }) }}
                            <div class="invalid-feedback">
                                {{ form_errors(form.description) }}
                            </div>
                            <small class="form-text text-muted mt-1">
                                <i class="fas fa-info-circle me-1"></i>Minimum 10 caractères - Cliquez sur le microphone pour dicter
                            </small>
                        </div>

                        <!-- Champ Type -->
                        <div class="mb-3 input-with-icon">
                            <div class="d-flex align-items-center mb-2">
                                <i class="fas fa-tag input-icon text-primary me-2"></i>
                                {{ form_label(form.type, null, {
                                    'label_attr': {'class': 'form-label fw-bold text-primary m-0'}
                                }) }}
                            </div>
                            {{ form_widget(form.type, {
                                'attr': {
                                    'class': 'form-select' ~ (form.type.vars.errors|length ? ' is-invalid' : '')
                                }
                            }) }}
                            <div class="invalid-feedback">
                                {{ form_errors(form.type) }}
                            </div>
                        </div>
                        
                        {% if form.status is defined %}
                        <!-- Champ Statut (admin seulement) -->
                        <div class="mb-3 input-with-icon">
                            <div class="d-flex align-items-center mb-2">
                                <i class="fas fa-info-circle input-icon text-primary me-2"></i>
                                {{ form_label(form.status, null, {
                                    'label_attr': {'class': 'form-label fw-bold text-primary m-0'}
                                }) }}
                            </div>
                            {{ form_widget(form.status, {
                                'attr': {
                                    'class': 'form-select' ~ (form.status.vars.errors|length ? ' is-invalid' : '')
                                }
                            }) }}
                            <div class="invalid-feedback">
                                {{ form_errors(form.status) }}
                            </div>
                        </div>
                        {% endif %}
                        
                        {% if form.date is defined %}
                        <!-- Champ Date (admin seulement) -->
                        <div class="mb-3 input-with-icon">
                            <div class="d-flex align-items-center mb-2">
                                <i class="far fa-calendar-alt input-icon text-primary me-2"></i>
                                {{ form_label(form.date, null, {
                                    'label_attr': {'class': 'form-label fw-bold text-primary m-0'}
                                }) }}
                            </div>
                            {{ form_widget(form.date, {
                                'attr': {
                                    'class': 'form-control' ~ (form.date.vars.errors|length ? ' is-invalid' : '')
                                }
                            }) }}
                            <div class="invalid-feedback">
                                {{ form_errors(form.date) }}
                            </div>
                        </div>
                        {% endif %}
                    </div>

                    <div class="card-footer text-end">
                        <a href="{{ path('front_reclamations') }}" class="btn btn-secondary me-2">
                            <i class="fas fa-arrow-left me-1"></i> Annuler
                        </a>
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-paper-plane me-1"></i> Soumettre la réclamation
                        </button>
                    </div>
                </div>
                
                {{ form_end(form) }}
            </div>
        </div>
    </div>
{% endblock %}

{% block css %}
    {{ parent() }}
    <style>
        .page-header {
            margin-bottom: 2rem;
            padding: 1rem 0;
            border-bottom: 1px solid #e9ecef;
        }
        .page-header-title {
            font-size: 1.75rem;
            font-weight: 600;
            color: #2c3e50;
        }
        .input-with-icon {
            position: relative;
        }
        .input-icon {
            font-size: 0.9rem;
        }
        .form-control, .form-select {
            border-radius: 0.375rem;
            border: 1px solid #ced4da;
            transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
        }
        .form-control:focus, .form-select:focus {
            border-color: #86b7fe;
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        }
        .is-invalid {
            border-color: #dc3545;
        }
        .invalid-feedback {
            display: block;
            color: #dc3545;
            font-size: 0.875em;
        }
        .card-header.bg-danger {
            background-color: #dc3545 !important;
        }
        .card-header.bg-info {
            background-color: #0dcaf0 !important;
        }
        .form-label {
            margin-bottom: 0;
            display: inline-block;
        }
        .btn-primary {
            background-color: #0d6efd;
            border-color: #0d6efd;
        }
        .btn-info {
            background-color: #0dcaf0;
            border-color: #0dcaf0;
        }
        .btn-success {
            background-color: #198754;
            border-color: #198754;
        }
        .form-text {
            font-size: 0.85rem;
        }
        #start-recording {
            transition: all 0.3s ease;
        }
        #start-recording:hover {
            transform: scale(1.05);
        }
        .btn-recording {
            animation: pulse 1.5s infinite;
        }
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
    </style>
{% endblock %}

{% block javascript %}
    {{ parent() }}
    
    <script>
document.addEventListener('DOMContentLoaded', function() {
    // Initialisation des variables
    const translationUrl = document.getElementById('translation-container')?.dataset.translationUrl || '/reclamation/translate';
    const translateBtn = document.getElementById('translate-btn');
    const useTranslationBtn = document.getElementById('use-translation');
    const textToTranslateField = document.getElementById('text_to_translate');
    const translatedTextField = document.getElementById('translated_text');
    const descriptionField = document.getElementById('reclamation_description');
    const startRecordingBtn = document.getElementById('start-recording');
    
    // Track when the last translation was requested (to prevent rapid successive calls)
    let lastTranslationTime = 0;
    const TRANSLATION_COOLDOWN = 2000; // 2 seconds cooldown

    // Vérifier si la reconnaissance vocale est disponible dans le navigateur
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition || null;
    let isRecording = false;
    let recognition = null;

    // Fonction de traduction améliorée avec cooldown
    if (translateBtn) {
        translateBtn.addEventListener('click', async function() {
            const textToTranslate = textToTranslateField.value.trim();
            const targetLanguage = document.getElementById('target_language').value;
            const currentTime = Date.now();

            if (!textToTranslate) {
                alert('Veuillez entrer un texte à traduire.');
                return;
            }
            
            // Check if we're trying to translate too frequently
            if (currentTime - lastTranslationTime < TRANSLATION_COOLDOWN) {
                alert('Veuillez attendre quelques secondes entre les traductions.');
                return;
            }
            
            lastTranslationTime = currentTime;

            // Afficher l'indicateur de chargement
            const originalBtnText = translateBtn.innerHTML;
            translateBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i> Traduction en cours...';
            translateBtn.disabled = true;

            try {
                // Utiliser une URL absolue pour éviter les problèmes de routage
                const fullUrl = translationUrl.startsWith('/') ? 
                    window.location.origin + translationUrl : translationUrl;
                
                const response = await fetch(fullUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: new URLSearchParams({
                        'text': textToTranslate,
                        'target_lang': targetLanguage
                    })
                });

                // Vérifier le type de contenu
                const contentType = response.headers.get('content-type');
                
                if (!response.ok) {
                    if (contentType && contentType.includes('application/json')) {
                        const errorData = await response.json();
                        throw new Error(errorData.error || 'Erreur de traduction');
                    } else {
                        // Pour les erreurs 502, message spécifique
                        if (response.status === 502) {
                            throw new Error('Le service de traduction externe est temporairement indisponible. Veuillez réessayer plus tard.');
                        } else {
                            console.error('Réponse non-JSON:', await response.text());
                            throw new Error('Erreur de communication avec le serveur');
                        }
                    }
                }
                
                // S'assurer que la réponse est du JSON
                if (contentType && contentType.includes('application/json')) {
                    const data = await response.json();
                    translatedTextField.value = data.translation;
                    
                    // Afficher la méthode de traduction utilisée
                    const methodInfo = document.createElement('small');
                    methodInfo.className = 'form-text text-info mt-1';
                    methodInfo.innerHTML = `<i class="fas fa-info-circle"></i> Traduction via: ${data.method || 'API principale'}`;
                    const infoContainer = document.querySelector('#translation-info');
                    if (infoContainer) {
                        infoContainer.innerHTML = '';
                        infoContainer.appendChild(methodInfo);
                    }
                } else {
                    console.error('Le serveur n\'a pas renvoyé de JSON:', contentType);
                    throw new Error('Format de réponse invalide');
                }
            } catch (error) {
                console.error('Erreur:', error);
                alert('Erreur: ' + error.message);
            } finally {
                translateBtn.innerHTML = originalBtnText;
                translateBtn.disabled = false;
            }
        });
    }

    // Utiliser la traduction
    if (useTranslationBtn && descriptionField) {
        useTranslationBtn.addEventListener('click', function() {
            if (translatedTextField.value.trim()) {
                descriptionField.value = translatedTextField.value;
            } else {
                alert('Aucun texte traduit à utiliser.');
            }
        });
    }

    // Reconnaissance vocale améliorée
    if (startRecordingBtn && descriptionField) {
        // Mise à jour de l'état du bouton en fonction de la compatibilité
        if (!SpeechRecognition) {
            startRecordingBtn.innerHTML = '<i class="fas fa-microphone-slash"></i> Non supporté';
            startRecordingBtn.classList.add('btn-secondary');
            startRecordingBtn.disabled = true;
            startRecordingBtn.title = "La reconnaissance vocale n'est pas supportée par votre navigateur";
        } else {
            // Initialiser l'objet de reconnaissance
            recognition = new SpeechRecognition();
            recognition.lang = 'fr-FR';
            recognition.continuous = false;
            recognition.interimResults = true;
            
            // Événement pour commencer ou arrêter l'enregistrement
            startRecordingBtn.addEventListener('click', function() {
                if (isRecording) {
                    // Arrêter l'enregistrement
                    recognition.stop();
                } else {
                    // Commencer l'enregistrement
                    try {
                        recognition.start();
                        isRecording = true;
                        startRecordingBtn.innerHTML = '<i class="fas fa-microphone-slash"></i> Arrêter';
                        startRecordingBtn.classList.add('btn-danger', 'btn-recording');
                        startRecordingBtn.classList.remove('btn-outline-primary');
                    } catch (error) {
                        console.error('Erreur lors du démarrage de la reconnaissance vocale:', error);
                        alert('Impossible de démarrer la reconnaissance vocale: ' + error.message);
                    }
                }
            });
            
            // Gérer les résultats de la reconnaissance
            recognition.onresult = function(event) {
                let finalTranscript = '';
                let interimTranscript = '';
                
                for (let i = event.resultIndex; i < event.results.length; ++i) {
                    if (event.results[i].isFinal) {
                        finalTranscript += event.results[i][0].transcript;
                    } else {
                        interimTranscript += event.results[i][0].transcript;
                    }
                }
                
                if (finalTranscript !== '') {
                    // Ajouter au champ de description ou remplacer son contenu
                    if (descriptionField.value.trim() !== '') {
                        descriptionField.value += ' ' + finalTranscript;
                    } else {
                        descriptionField.value = finalTranscript;
                    }
                }
                
                // Afficher les résultats temporaires
                if (interimTranscript !== '') {
                    // Option: afficher les résultats intermédiaires quelque part
                    console.log("Transcription temporaire:", interimTranscript);
                }
            };
            
            // Gérer les erreurs
            recognition.onerror = function(event) {
                console.error('Erreur reconnaissance vocale:', event.error);
                if (event.error === 'not-allowed') {
                    alert('Veuillez autoriser l\'accès au microphone pour utiliser la reconnaissance vocale.');
                }
                resetRecordingButton();
            };
            
            // Quand la reconnaissance s'arrête
            recognition.onend = function() {
                resetRecordingButton();
            };
        }
        
        // Fonction pour réinitialiser l'état du bouton
        function resetRecordingButton() {
            isRecording = false;
            startRecordingBtn.innerHTML = '<i class="fas fa-microphone"></i> Parler';
            startRecordingBtn.classList.remove('btn-danger', 'btn-recording');
            startRecordingBtn.classList.add('btn-outline-primary');
        }
    }
});
    </script>
{% endblock %}
                
